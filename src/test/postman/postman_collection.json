{
	"info": {
		"_postman_id": "570de3f4-f9c7-4a07-9291-d82ae26de4e3",
		"name": "CRUD API Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33337740",
		"_collection_link": "https://solar-robot-904025.postman.co/workspace/Batch231NT~265fc465-839d-42b4-94e6-86a04a109eb9/collection/33337740-570de3f4-f9c7-4a07-9291-d82ae26de4e3?action=share&source=collection_link&creator=33337740"
	},
	"item": [
		{
			"name": "TC01_Positive_Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the response body\r",
							"const response = pm.response.json();\r",
							"\r",
							"// Check the status code\r",
							"pm.test('Status code is 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Check response time\r",
							"pm.test('Response time is less than 200ms', () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// Validate the response body structure\r",
							"pm.test('Response body has correct structure', () => {\r",
							"    pm.expect(response).to.have.all.keys('message', 'user');\r",
							"    pm.expect(response.message).to.be.a('string');\r",
							"    pm.expect(response.user).to.have.all.keys('username');\r",
							"    pm.expect(response.user.username).to.be.a('string');\r",
							"});\r",
							"\r",
							"// Check content-type header\r",
							"pm.test('Content-Type is application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"username\": \"admin\", \"password\": \"123456\"}"
				},
				"url": {
					"raw": "http://localhost:3001/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC02_Positive_POST /items",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"id\", pm.response.json().id);\r",
							"\r",
							"// Parse the JSON response\r",
							"const response = pm.response.json();\r",
							"\r",
							"// Test for the correct status code\r",
							"pm.test(\"Status code is 201\", () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// Test for response time\r",
							"pm.test(\"Response time is less than 200ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// Test for content type\r",
							"pm.test(\"Content-Type is application/json\", () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"// Validate response body properties\r",
							"pm.test(\"Response body contains id and name\", () => {\r",
							"    pm.expect(response).to.have.property('id');\r",
							"    pm.expect(response).to.have.property('name');\r",
							"});\r",
							"\r",
							"// Validate the type of properties\r",
							"pm.test(\"id is a number and name is a string\", () => {\r",
							"    pm.expect(response.id).to.be.a('number');\r",
							"    pm.expect(response.name).to.be.a('string');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"New Bug\"}"
				},
				"url": {
					"raw": "http://localhost:3001/items",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"items"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC03_Positive_GET /items",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"// Test for status code\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test for response time\r",
							"pm.test(\"Response time is less than 200ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// Test for content type\r",
							"pm.test(\"Content-Type is application/json\", () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"// Test for response body structure\r",
							"pm.test(\"Response is an array\", () => {\r",
							"    pm.expect(response).to.be.an('array');\r",
							"});\r",
							"\r",
							"// Test for each item in the array\r",
							"response.forEach(item => {\r",
							"    pm.test(\"Item has required fields\", () => {\r",
							"        pm.expect(item).to.have.all.keys('id', 'name');\r",
							"        pm.expect(item.id).to.be.a('number');\r",
							"        pm.expect(item.name).to.be.a('string');\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3001/items",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"items"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC04_Positive_PUT /items/{id}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"// Test for status code\r",
							"pm.expect(pm.response.code).to.equal(200);\r",
							"\r",
							"// Test for response time\r",
							"pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"\r",
							"// Test for content type\r",
							"pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"\r",
							"// Test for response body properties\r",
							"pm.expect(response).to.have.all.keys('id', 'name');\r",
							"\r",
							"// Test for id property\r",
							"pm.expect(response.id).to.exist;\r",
							"pm.expect(response.id).to.be.a('number');\r",
							"\r",
							"// Test for name property\r",
							"pm.expect(response.name).to.exist;\r",
							"pm.expect(response.name).to.be.a('string');\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Updated Bug\"}"
				},
				"url": {
					"raw": "http://localhost:3001/items/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"items",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC05_Positive_DELETE /items/{id}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to check the status code of the response\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test to check response time\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Item deleted\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3001/items/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"items",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC06_Negative_invaliduser_login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"// Test for status code\r",
							"pm.expect(pm.response.code).to.equal(401);\r",
							"\r",
							"// Test for response time\r",
							"pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"\r",
							"// Test for content type\r",
							"pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"\r",
							"// Test for error field in response body\r",
							"pm.expect(response).to.have.property('error');\r",
							"pm.expect(response.error).to.be.a('string');\r",
							"pm.expect(response.error).to.equal('Invalid username or password');\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"username\": \"invalidUser\", \"password\": \"123456\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3001/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"login"
					]
				},
				"description": "Generated from cURL: curl --location 'http://localhost:3001/login' \\\r\n--header 'Content-Type: application/json' \\\r\n--data '{\"username\": \"invalidUser\", \"password\": \"123456\"}'\r\n"
			},
			"response": []
		},
		{
			"name": "TC07_Negative_invalidpassword_login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test for response time\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// Test for Content-Type header\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"// Additional test to check if response body is not empty\r",
							"pm.test(\"Response body is not empty\", function () {\r",
							"    pm.expect(pm.response.json()).to.not.be.empty;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"username\": \"admin\", \"password\": \"invalid\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3001/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"login"
					]
				},
				"description": "Generated from cURL: curl --location 'http://localhost:3001/login' \\\r\n--header 'Content-Type: application/json' \\\r\n--data '{\"username\": \"invalidUser\", \"password\": \"123456\"}'\r\n"
			},
			"response": []
		},
		{
			"name": "TC08_Negative_emptyusername_login",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"username\": \"\", \"password\": \"invalid\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3001/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"login"
					]
				},
				"description": "Generated from cURL: curl --location 'http://localhost:3001/login' \\\r\n--header 'Content-Type: application/json' \\\r\n--data '{\"username\": \"invalidUser\", \"password\": \"123456\"}'\r\n"
			},
			"response": []
		},
		{
			"name": "TC09_Negative_emptypassword_login",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"username\": \"admin\", \"password\": \"\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3001/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"login"
					]
				},
				"description": "Generated from cURL: curl --location 'http://localhost:3001/login' \\\r\n--header 'Content-Type: application/json' \\\r\n--data '{\"username\": \"invalidUser\", \"password\": \"123456\"}'\r\n"
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "id",
			"value": ""
		}
	]
}